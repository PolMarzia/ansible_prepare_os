---
- name: Check thar variable disk_to_encrypt is defined
  assert:
    that:
      - disk_to_encrypt is defined
    fail_msg: "Variable 'disk_to_encrypt' is not defined in inventory."
  when: disk_to_encrypt is not defined

- block:
    - name: Check if the disk exists
      stat:
        path: "{{ disk_to_encrypt }}"
      register: disk_exists

    - name: Check if the disk is not encrypted
      command: cryptsetup luksDump {{ disk_to_encrypt }}
      register: encrypt_info
      changed_when: false
      ignore_errors: yes

- block:
    - name: Unmount disk
      shell: "umount {{ disk_to_encrypt }}"
      ignore_errors: yes

    - name: Create a cryptographic key
      command: dd if=/dev/urandom of=/root/.keyfile bs=1024 count=4
      args:
        creates: /root/.keyfile

    - name: Set permissions on keyfile
      file:
        path: /root/.keyfile
        mode: '0400'

    - name: Encrypt specified disk
      community.crypto.luks_device:
        device: "{{ disk_to_encrypt }}"
        state: "present"
        keyfile: "/root/.keyfile"

    - name: Open the encrypted disk
      shell: "cryptsetup luksOpen {{ disk_to_encrypt }} {{ disk_to_encrypt | basename }} --key-file /root/.keyfile"

    - name: Create a filesystem on the encrypted disk
      community.general.filesystem:
        fstype: ext4
        dev: "{{ disk_to_encrypt }}"

    - name: Mount the encrypted disk
      ansible.builtin.mount:
        src: "/dev/mapper/{{ disk_to_encrypt | basename}}"
        path: "/mnt/{{ disk_to_encrypt | basename}}"
        fstype: ext4
        state: mounted

  when: disk_exists.stat.exists and encrypt_info.rc != 0