---
- name: Encrypt Disks
  tasks:
    - name: Check if disk_to_encrypt is defined
      assert:
        that:
          - disk_to_encrypt is defined
        fail_msg: "Variable 'disk_to_encrypt' is not defined in inventory."
      when: disk_to_encrypt is not defined

  blocks:
    - name: Check if the disk exists
      tasks:
        - name: Check if the disk exists
          stat:
            path: "{{ disk_to_encrypt }}"
          register: disk_exists
        - name: Check if the disk is not encrypted
          command: cryptsetup luksDump {{ disk_to_encrypt }}
          register: encrypt_info
          changed_when: false
          ignore_errors: yes

    - name: Encrypt and Mount Disk
      tasks:
        - name: Unmount disk
          command: umount {{ disk_to_encrypt }}
          ignore_errors: yes

        - name: Create a cryptographic key
          command: dd if=/dev/urandom of=/root/.keyfile bs=1024 count=4
          args:
            creates: /root/.keyfile

        - name: Set permissions on keyfile
          file:
            path: /root/.keyfile
            mode: '0400'

        - name: Encrypt specified disk
          shell: "cryptsetup luksFormat {{ disk_to_encrypt }} /root/.keyfile"
          vars:
            disk_to_encrypt: "{{ disk_to_encrypt }}"

        - name: Open the encrypted disk
          shell: "cryptsetup luksOpen {{ disk_to_encrypt }} {{ disk_to_encrypt }} --key-file /root/.keyfile"
          vars:
            disk_to_encrypt: "{{ disk_to_encrypt }}"

        - name: Create a filesystem on the encrypted disk
          shell: "mkfs.ext4 /dev/mapper/{{ disk_to_encrypt }}"

        - name: Mount the encrypted disk
          shell: "mount /dev/mapper/enc_disk /mnt/{{ disk_to_encrypt }}"
          args:
            creates: /mnt/enc_disk
      when: disk_exists.stat.exists and encrypt_info.rc != 0
